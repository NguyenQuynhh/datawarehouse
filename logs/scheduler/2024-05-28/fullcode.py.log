[2024-05-28T13:33:41.638+0000] {processor.py:161} INFO - Started process (PID=3334) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:33:41.639+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:33:41.641+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:33:41.640+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:33:41.735+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:33:41.707+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:33:41.737+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:33:41.873+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.243 seconds
[2024-05-28T13:34:12.034+0000] {processor.py:161} INFO - Started process (PID=3343) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:34:12.037+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:34:12.040+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:34:12.039+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:34:12.092+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:34:12.078+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:34:12.094+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:34:12.140+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.122 seconds
[2024-05-28T13:34:42.310+0000] {processor.py:161} INFO - Started process (PID=3351) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:34:42.314+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:34:42.319+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:34:42.317+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:34:42.364+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:34:42.353+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:34:42.369+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:34:42.448+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.158 seconds
[2024-05-28T13:35:12.587+0000] {processor.py:161} INFO - Started process (PID=3359) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:35:12.589+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:35:12.592+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:35:12.591+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:35:12.633+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:35:12.622+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:35:12.634+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:35:12.667+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.097 seconds
[2024-05-28T13:35:43.074+0000] {processor.py:161} INFO - Started process (PID=3368) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:35:43.094+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:35:43.107+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:35:43.099+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:35:43.217+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:35:43.205+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:35:43.218+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:35:43.338+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.419 seconds
[2024-05-28T13:36:13.523+0000] {processor.py:161} INFO - Started process (PID=3376) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:36:13.529+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:36:13.534+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:36:13.531+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:36:13.618+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:36:13.600+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:36:13.621+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:36:13.865+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.374 seconds
[2024-05-28T13:36:44.002+0000] {processor.py:161} INFO - Started process (PID=3384) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:36:44.010+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:36:44.012+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:36:44.011+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:36:44.083+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:36:44.060+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:36:44.086+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:36:44.149+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.168 seconds
[2024-05-28T13:37:14.372+0000] {processor.py:161} INFO - Started process (PID=3392) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:37:14.374+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:37:14.377+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:37:14.376+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:37:14.421+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:37:14.408+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:37:14.423+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:37:14.467+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.109 seconds
[2024-05-28T13:37:44.669+0000] {processor.py:161} INFO - Started process (PID=3400) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:37:44.671+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:37:44.674+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:37:44.673+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:37:44.720+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:37:44.707+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:37:44.724+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:37:44.780+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.123 seconds
[2024-05-28T13:38:15.136+0000] {processor.py:161} INFO - Started process (PID=3408) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:38:15.140+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:38:15.143+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:38:15.142+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:38:15.193+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:38:15.181+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:38:15.195+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:38:15.238+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.120 seconds
[2024-05-28T13:38:45.751+0000] {processor.py:161} INFO - Started process (PID=3416) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:38:45.752+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:38:45.754+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:38:45.753+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:38:45.782+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:38:45.775+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:38:45.783+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:38:45.810+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.068 seconds
[2024-05-28T13:39:16.056+0000] {processor.py:161} INFO - Started process (PID=3424) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:39:16.057+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:39:16.059+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:39:16.058+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:39:16.082+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:39:16.075+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:39:16.083+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:39:16.107+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.060 seconds
[2024-05-28T13:39:46.409+0000] {processor.py:161} INFO - Started process (PID=3432) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:39:46.411+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:39:46.413+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:39:46.412+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:39:46.454+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:39:46.444+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:39:46.455+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:39:46.489+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.091 seconds
[2024-05-28T13:40:16.759+0000] {processor.py:161} INFO - Started process (PID=3440) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:40:16.761+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:40:16.762+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:40:16.762+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:40:16.787+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:40:16.780+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:40:16.788+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:40:16.813+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.065 seconds
[2024-05-28T13:40:47.068+0000] {processor.py:161} INFO - Started process (PID=3448) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:40:47.070+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:40:47.073+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:40:47.072+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:40:47.111+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:40:47.102+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:40:47.112+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:40:47.143+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.087 seconds
[2024-05-28T13:41:17.392+0000] {processor.py:161} INFO - Started process (PID=3456) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:17.393+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:41:17.395+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:41:17.394+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:17.423+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:41:17.415+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:41:17.425+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:17.458+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.075 seconds
[2024-05-28T13:41:47.882+0000] {processor.py:161} INFO - Started process (PID=3464) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:47.885+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:41:47.887+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:41:47.886+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:47.930+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:41:47.919+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:41:47.932+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:47.974+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.106 seconds
[2024-05-28T13:41:54.180+0000] {processor.py:161} INFO - Started process (PID=3465) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:54.182+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:41:54.184+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:41:54.183+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:54.250+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:41:54.238+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:41:54.253+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:41:54.300+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.130 seconds
[2024-05-28T13:42:24.408+0000] {processor.py:161} INFO - Started process (PID=3473) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:42:24.410+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:42:24.411+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:42:24.411+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:42:24.436+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:42:24.430+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:42:24.437+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:42:24.460+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.059 seconds
[2024-05-28T13:42:54.729+0000] {processor.py:161} INFO - Started process (PID=3481) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:42:54.731+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:42:54.732+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:42:54.732+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:42:54.768+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:42:54.758+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:42:54.770+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:42:54.864+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.145 seconds
[2024-05-28T13:43:25.138+0000] {processor.py:161} INFO - Started process (PID=3489) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:43:25.140+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:43:25.142+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:43:25.141+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:43:25.172+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:43:25.163+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:43:25.174+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:43:25.200+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.070 seconds
[2024-05-28T13:43:55.798+0000] {processor.py:161} INFO - Started process (PID=3498) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:43:55.800+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:43:55.803+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:43:55.802+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:43:55.850+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:43:55.836+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:43:55.851+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:43:55.875+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.086 seconds
[2024-05-28T13:44:26.189+0000] {processor.py:161} INFO - Started process (PID=3506) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:44:26.190+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:44:26.192+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:44:26.191+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:44:26.225+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:44:26.216+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 21, in <module>
    dag = DAG(
          ^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 519, in __init__
    validate_key(dag_id)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/helpers.py", line 57, in validate_key
    raise AirflowException(
airflow.exceptions.AirflowException: The key 'ETL pipeline' has to be made of alphanumeric characters, dashes, dots and underscores exclusively
[2024-05-28T13:44:26.227+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:44:26.257+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.078 seconds
[2024-05-28T13:44:50.690+0000] {processor.py:161} INFO - Started process (PID=3514) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:44:50.692+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:44:50.694+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:44:50.693+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:44:50.764+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:44:50.757+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 365, in <module>
    UpdateCustomer=read_sql_file('/opt/airflow/dags/SQL_Queries/Update_Customer.sql')
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fullcode.py", line 360, in read_sql_file
    with open(file_path, 'r') as file:
         ^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/opt/airflow/dags/SQL_Queries/Update_Customer.sql'
[2024-05-28T13:44:50.767+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:44:50.803+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.130 seconds
[2024-05-28T13:45:21.264+0000] {processor.py:161} INFO - Started process (PID=3523) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:21.267+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:45:21.269+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:21.268+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:21.330+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:21.314+0000] {dagbag.py:355} ERROR - Failed to import: /opt/airflow/dags/fullcode.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py", line 351, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 995, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "/opt/airflow/dags/fullcode.py", line 365, in <module>
    UpdateCustomer=read_sql_file('/opt/airflow/dags/SQL_Queries/Update_Customer.sql')
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fullcode.py", line 360, in read_sql_file
    with open(file_path, 'r') as file:
         ^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/opt/airflow/dags/SQL_Queries/Update_Customer.sql'
[2024-05-28T13:45:21.334+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:21.430+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.178 seconds
[2024-05-28T13:45:25.575+0000] {processor.py:161} INFO - Started process (PID=3524) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:25.577+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:45:25.580+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:25.579+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:25.660+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:45:25.666+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:45:25.673+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:45:25.680+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:45:25.686+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:45:25.692+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:45:25.698+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:45:25.704+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:45:25.796+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:26.219+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:26.216+0000] {override.py:1829} INFO - Created Permission View: can delete on DAG:ETL_pipeline
[2024-05-28T13:45:26.252+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:26.250+0000] {override.py:1829} INFO - Created Permission View: can edit on DAG:ETL_pipeline
[2024-05-28T13:45:26.290+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:26.289+0000] {override.py:1829} INFO - Created Permission View: can read on DAG:ETL_pipeline
[2024-05-28T13:45:26.292+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:26.292+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:45:26.353+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:26.352+0000] {dag.py:3118} INFO - Creating ORM DAG for ETL_pipeline
[2024-05-28T13:45:26.356+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:26.356+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:45:26.470+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.912 seconds
[2024-05-28T13:45:57.159+0000] {processor.py:161} INFO - Started process (PID=3533) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:57.161+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:45:57.162+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:57.162+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:57.206+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:45:57.212+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:45:57.218+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:45:57.224+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:45:57.229+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:45:57.234+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:45:57.239+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:45:57.244+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:45:57.263+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:45:57.323+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:57.322+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:45:57.345+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:45:57.345+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:45:57.386+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.235 seconds
[2024-05-28T13:46:27.744+0000] {processor.py:161} INFO - Started process (PID=3541) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:46:27.747+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:46:27.751+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:46:27.749+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:46:27.808+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:46:27.813+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:46:27.818+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:46:27.824+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:46:27.829+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:46:27.833+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:46:27.840+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:46:27.844+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:46:27.877+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:46:27.954+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:46:27.954+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:46:27.984+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:46:27.983+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:46:28.022+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.300 seconds
[2024-05-28T13:46:58.150+0000] {processor.py:161} INFO - Started process (PID=3549) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:46:58.152+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:46:58.154+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:46:58.153+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:46:58.193+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:46:58.198+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:46:58.203+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:46:58.209+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:46:58.215+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:46:58.220+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:46:58.224+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:46:58.229+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:46:58.248+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:46:58.300+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:46:58.300+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:46:58.320+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:46:58.319+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:46:58.348+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.209 seconds
[2024-05-28T13:47:28.734+0000] {processor.py:161} INFO - Started process (PID=3557) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:47:28.736+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:47:28.739+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:47:28.738+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:47:28.794+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:47:28.807+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:47:28.817+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:47:28.827+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:47:28.843+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:47:28.859+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:47:28.868+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:47:28.877+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:47:28.902+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:47:28.973+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:47:28.972+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:47:29.013+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:47:29.011+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:47:29.062+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.345 seconds
[2024-05-28T13:47:59.211+0000] {processor.py:161} INFO - Started process (PID=3571) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:47:59.214+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:47:59.216+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:47:59.215+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:47:59.264+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:47:59.271+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:47:59.277+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:47:59.284+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:47:59.290+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:47:59.296+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:47:59.302+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:47:59.309+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:47:59.344+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:47:59.420+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:47:59.420+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:47:59.443+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:47:59.442+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:47:59.471+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.273 seconds
[2024-05-28T13:48:29.543+0000] {processor.py:161} INFO - Started process (PID=3579) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:48:29.544+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:48:29.546+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:48:29.545+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:48:29.581+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:48:29.587+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:48:29.592+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:48:29.601+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:48:29.606+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:48:29.611+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:48:29.616+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:48:29.620+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:48:29.643+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:48:29.699+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:48:29.698+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:48:29.719+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:48:29.718+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:48:29.752+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.219 seconds
[2024-05-28T13:48:59.968+0000] {processor.py:161} INFO - Started process (PID=3588) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:48:59.970+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:48:59.972+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:48:59.972+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:49:00.037+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:49:00.044+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:49:00.049+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:49:00.056+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:49:00.062+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:49:00.066+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:49:00.070+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:49:00.075+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:49:00.095+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:49:00.141+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:49:00.141+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:49:00.160+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:49:00.160+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:49:00.187+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.233 seconds
[2024-05-28T13:49:30.312+0000] {processor.py:161} INFO - Started process (PID=3596) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:49:30.314+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:49:30.316+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:49:30.315+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:49:30.350+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:49:30.355+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:49:30.358+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:49:30.362+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:49:30.365+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:49:30.369+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:49:30.373+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:49:30.377+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:49:30.392+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:49:30.433+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:49:30.433+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:49:30.452+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:49:30.451+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:49:30.476+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.175 seconds
[2024-05-28T13:50:00.629+0000] {processor.py:161} INFO - Started process (PID=3604) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:50:00.631+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:50:00.632+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:50:00.631+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:50:00.667+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:50:00.671+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:50:00.675+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:50:00.679+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:50:00.682+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:50:00.686+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:50:00.689+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:50:00.693+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:50:00.708+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:50:00.751+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:50:00.750+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:50:00.774+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:50:00.774+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:50:00.812+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.191 seconds
[2024-05-28T13:50:30.967+0000] {processor.py:161} INFO - Started process (PID=3612) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:50:30.968+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:50:30.970+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:50:30.969+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:50:31.000+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:50:31.006+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:50:31.010+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:50:31.014+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:50:31.018+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:50:31.022+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:50:31.027+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:50:31.031+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:50:31.048+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:50:31.102+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:50:31.101+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:50:31.125+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:50:31.125+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:50:31.156+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.199 seconds
[2024-05-28T13:51:01.386+0000] {processor.py:161} INFO - Started process (PID=3620) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:51:01.388+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:51:01.390+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:51:01.389+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:51:01.452+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:51:01.458+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:51:01.464+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:51:01.470+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:51:01.476+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:51:01.481+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:51:01.487+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:51:01.493+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:51:01.512+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:51:01.562+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:51:01.561+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:51:01.583+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:51:01.583+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:51:01.614+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.237 seconds
[2024-05-28T13:51:31.811+0000] {processor.py:161} INFO - Started process (PID=3628) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:51:31.812+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:51:31.814+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:51:31.813+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:51:31.844+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:51:31.848+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:51:31.852+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:51:31.857+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:51:31.863+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:51:31.867+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:51:31.872+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:51:31.878+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:51:31.900+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:51:31.966+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:51:31.965+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:51:31.986+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:51:31.985+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:51:32.013+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.213 seconds
[2024-05-28T13:52:02.167+0000] {processor.py:161} INFO - Started process (PID=3636) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:52:02.172+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:52:02.175+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:52:02.174+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:52:02.236+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:52:02.244+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:52:02.250+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:52:02.257+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:52:02.263+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:52:02.272+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:52:02.278+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:52:02.285+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:52:02.324+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:52:02.412+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:52:02.412+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:52:02.445+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:52:02.444+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:52:02.502+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.354 seconds
[2024-05-28T13:52:32.561+0000] {processor.py:161} INFO - Started process (PID=3644) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:52:32.562+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:52:32.564+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:52:32.563+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:52:32.590+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:52:32.594+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:52:32.597+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:52:32.601+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:52:32.604+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:52:32.608+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:52:32.611+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:52:32.614+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:52:32.628+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:52:32.670+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:52:32.670+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:52:32.688+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:52:32.687+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:52:32.712+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.158 seconds
[2024-05-28T13:53:02.813+0000] {processor.py:161} INFO - Started process (PID=3652) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:53:02.814+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:53:02.816+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:53:02.815+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:53:02.849+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:53:02.853+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:53:02.857+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:53:02.860+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:53:02.864+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:53:02.869+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:53:02.875+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:53:02.880+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:53:02.896+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:53:02.938+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:53:02.938+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:53:02.956+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:53:02.956+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:53:02.982+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.180 seconds
[2024-05-28T13:53:33.260+0000] {processor.py:161} INFO - Started process (PID=3660) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:53:33.263+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:53:33.265+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:53:33.264+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:53:33.315+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:53:33.321+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:53:33.326+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:53:33.332+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:53:33.339+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:53:33.346+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:53:33.352+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:53:33.357+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:53:33.375+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:53:33.420+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:53:33.420+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:53:33.439+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:53:33.439+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:53:33.464+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.215 seconds
[2024-05-28T13:54:03.840+0000] {processor.py:161} INFO - Started process (PID=3668) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:03.845+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:54:03.849+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:03.848+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:03.976+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:54:03.988+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:54:03.999+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:54:04.017+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:54:04.035+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:54:04.047+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:54:04.056+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:54:04.064+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:54:04.098+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:04.183+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:04.181+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:54:04.226+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:04.225+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:54:04.267+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.478 seconds
[2024-05-28T13:54:08.530+0000] {processor.py:161} INFO - Started process (PID=3671) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:08.533+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:54:08.536+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:08.534+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:08.650+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:54:08.660+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:54:08.666+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:54:08.673+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:54:08.679+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:54:08.684+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:54:08.691+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:54:08.697+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:54:08.740+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:08.853+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:08.852+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:54:08.886+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:08.885+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:54:08.944+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.432 seconds
[2024-05-28T13:54:18.650+0000] {processor.py:161} INFO - Started process (PID=3672) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:18.654+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:54:18.657+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:18.656+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:18.760+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:54:18.767+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:54:18.776+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:54:18.784+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:54:18.791+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:54:18.797+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:54:18.808+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:54:18.815+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:54:18.877+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:19.019+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:19.018+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:54:19.053+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:19.053+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:54:19.104+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.468 seconds
[2024-05-28T13:54:49.507+0000] {processor.py:161} INFO - Started process (PID=3680) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:49.509+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:54:49.511+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:49.510+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:49.547+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:54:49.551+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:54:49.556+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:54:49.560+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:54:49.564+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:54:49.567+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:54:49.572+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:54:49.576+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:54:49.596+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:54:49.656+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:49.656+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:54:49.682+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:54:49.681+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:54:49.714+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.218 seconds
[2024-05-28T13:55:20.005+0000] {processor.py:161} INFO - Started process (PID=3688) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:55:20.007+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:55:20.009+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:55:20.008+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:55:20.046+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:55:20.050+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:55:20.056+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:55:20.060+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:55:20.066+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:55:20.071+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:55:20.076+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:55:20.081+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:55:20.107+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:55:20.199+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:55:20.199+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:55:20.243+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:55:20.243+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:55:20.286+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.291 seconds
[2024-05-28T13:55:50.642+0000] {processor.py:161} INFO - Started process (PID=3697) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:55:50.643+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:55:50.645+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:55:50.644+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:55:50.673+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:55:50.677+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:55:50.681+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:55:50.684+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:55:50.687+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:55:50.691+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:55:50.695+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:55:50.699+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:55:50.716+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:55:50.764+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:55:50.764+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:55:50.788+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:55:50.787+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:55:50.822+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.188 seconds
[2024-05-28T13:56:21.121+0000] {processor.py:161} INFO - Started process (PID=3705) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:56:21.123+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:56:21.126+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:56:21.125+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:56:21.169+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:56:21.176+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:56:21.182+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:56:21.188+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:56:21.194+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:56:21.200+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:56:21.206+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:56:21.213+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:56:21.241+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:56:21.322+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:56:21.322+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:56:21.350+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:56:21.348+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:56:21.392+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.284 seconds
[2024-05-28T13:56:51.668+0000] {processor.py:161} INFO - Started process (PID=3713) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:56:51.670+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:56:51.671+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:56:51.671+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:56:51.708+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:56:51.711+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:56:51.716+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:56:51.720+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:56:51.724+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:56:51.728+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:56:51.732+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:56:51.737+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:56:51.775+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:56:51.836+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:56:51.836+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:56:51.863+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:56:51.862+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:56:51.915+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.257 seconds
[2024-05-28T13:57:22.260+0000] {processor.py:161} INFO - Started process (PID=3722) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:57:22.262+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:57:22.263+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:57:22.262+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:57:22.296+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:57:22.300+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:57:22.305+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:57:22.309+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:57:22.313+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:57:22.316+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:57:22.321+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:57:22.325+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:57:22.342+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:57:22.385+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:57:22.384+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:57:22.404+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:57:22.404+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:57:22.430+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.179 seconds
[2024-05-28T13:57:52.721+0000] {processor.py:161} INFO - Started process (PID=3730) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:57:52.723+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:57:52.724+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:57:52.724+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:57:52.752+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:57:52.756+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:57:52.759+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:57:52.763+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:57:52.766+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:57:52.771+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:57:52.774+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:57:52.778+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:57:52.793+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:57:52.837+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:57:52.836+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:57:52.855+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:57:52.855+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:57:52.880+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.167 seconds
[2024-05-28T13:58:23.151+0000] {processor.py:161} INFO - Started process (PID=3738) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:58:23.156+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:58:23.159+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:58:23.157+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:58:23.187+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:58:23.191+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:58:23.194+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:58:23.198+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:58:23.201+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:58:23.205+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:58:23.209+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:58:23.213+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:58:23.228+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:58:23.276+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:58:23.276+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:58:23.303+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:58:23.302+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:58:23.331+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.189 seconds
[2024-05-28T13:58:53.941+0000] {processor.py:161} INFO - Started process (PID=3747) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:58:53.943+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:58:53.946+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:58:53.945+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:58:53.993+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:58:53.999+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:58:54.006+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:58:54.012+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:58:54.018+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:58:54.023+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:58:54.029+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:58:54.035+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:58:54.055+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:58:54.116+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:58:54.115+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:58:54.148+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:58:54.148+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:58:54.188+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.262 seconds
[2024-05-28T13:59:25.290+0000] {processor.py:161} INFO - Started process (PID=3757) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:59:25.304+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:59:25.315+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:59:25.314+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:59:25.565+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:59:25.607+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:59:25.624+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:59:25.632+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:59:25.657+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:59:25.668+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:59:25.681+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:59:25.693+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:59:25.758+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:59:25.979+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:59:25.978+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:59:26.049+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:59:26.048+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:59:26.117+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.882 seconds
[2024-05-28T13:59:56.361+0000] {processor.py:161} INFO - Started process (PID=3766) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T13:59:56.365+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T13:59:56.368+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:59:56.367+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T13:59:56.441+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T13:59:56.450+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T13:59:56.458+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T13:59:56.467+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T13:59:56.478+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T13:59:56.487+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T13:59:56.496+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T13:59:56.504+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T13:59:56.550+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T13:59:56.677+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:59:56.676+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T13:59:56.732+0000] {logging_mixin.py:188} INFO - [2024-05-28T13:59:56.731+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T13:59:56.789+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.449 seconds
[2024-05-28T14:00:27.084+0000] {processor.py:161} INFO - Started process (PID=3775) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:00:27.088+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:00:27.091+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:00:27.090+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:00:27.137+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T14:00:27.145+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T14:00:27.150+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T14:00:27.158+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T14:00:27.163+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T14:00:27.169+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T14:00:27.175+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T14:00:27.180+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T14:00:27.202+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:00:27.265+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:00:27.265+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T14:00:27.293+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:00:27.292+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T14:00:27.336+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.263 seconds
[2024-05-28T14:00:57.610+0000] {processor.py:161} INFO - Started process (PID=3785) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:00:57.612+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:00:57.613+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:00:57.613+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:00:57.651+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T14:00:57.657+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T14:00:57.662+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T14:00:57.666+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T14:00:57.672+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T14:00:57.677+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T14:00:57.681+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T14:00:57.686+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T14:00:57.708+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:00:57.778+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:00:57.778+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T14:00:57.801+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:00:57.800+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T14:00:57.834+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.234 seconds
[2024-05-28T14:01:28.187+0000] {processor.py:161} INFO - Started process (PID=3794) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:01:28.191+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:01:28.196+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:01:28.194+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:01:28.368+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T14:01:28.397+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T14:01:28.407+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T14:01:28.430+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T14:01:28.447+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T14:01:28.469+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T14:01:28.476+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T14:01:28.483+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T14:01:28.549+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:01:28.701+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:01:28.699+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T14:01:28.751+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:01:28.751+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T14:01:28.808+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.649 seconds
[2024-05-28T14:01:59.364+0000] {processor.py:161} INFO - Started process (PID=3803) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:01:59.372+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:01:59.401+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:01:59.400+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:01:59.629+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T14:01:59.662+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T14:01:59.681+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T14:01:59.692+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T14:01:59.998+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T14:02:00.245+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T14:02:00.261+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T14:02:00.266+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T14:02:00.314+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:00.464+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:02:00.464+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T14:02:00.552+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:02:00.552+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T14:02:00.659+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.327 seconds
[2024-05-28T14:02:31.074+0000] {processor.py:161} INFO - Started process (PID=3812) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:31.089+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:02:31.097+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:02:31.096+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:31.229+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T14:02:31.237+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T14:02:31.245+0000] {logging_mixin.py:188} INFO - -- dây là tạo từ oltp sang olap
create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T14:02:31.252+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T14:02:31.266+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T14:02:31.275+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T14:02:31.290+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T14:02:31.298+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T14:02:31.331+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:31.420+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:02:31.420+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T14:02:31.464+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:02:31.464+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T14:02:31.526+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.482 seconds
[2024-05-28T14:02:45.937+0000] {processor.py:161} INFO - Started process (PID=3819) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:45.956+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:02:45.969+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:02:45.968+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:46.031+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:02:46.089+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.188 seconds
[2024-05-28T14:03:16.510+0000] {processor.py:161} INFO - Started process (PID=3829) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:03:16.513+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:03:16.515+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:03:16.514+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:03:16.541+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:03:16.566+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.069 seconds
[2024-05-28T14:03:47.281+0000] {processor.py:161} INFO - Started process (PID=3839) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:03:47.282+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:03:47.284+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:03:47.284+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:03:47.317+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:03:47.345+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.076 seconds
[2024-05-28T14:04:17.697+0000] {processor.py:161} INFO - Started process (PID=3849) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:04:17.698+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:04:17.700+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:04:17.699+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:04:17.716+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:04:17.738+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T14:04:48.244+0000] {processor.py:161} INFO - Started process (PID=3859) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:04:48.246+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:04:48.248+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:04:48.248+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:04:48.265+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:04:48.288+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.052 seconds
[2024-05-28T14:05:18.730+0000] {processor.py:161} INFO - Started process (PID=3869) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:05:18.732+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:05:18.735+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:05:18.734+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:05:18.764+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:05:18.794+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.077 seconds
[2024-05-28T14:05:49.235+0000] {processor.py:161} INFO - Started process (PID=3879) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:05:49.236+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:05:49.238+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:05:49.238+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:05:49.260+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:05:49.288+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.061 seconds
[2024-05-28T14:06:19.703+0000] {processor.py:161} INFO - Started process (PID=3889) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:06:19.705+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:06:19.707+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:06:19.706+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:06:19.725+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:06:19.750+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.054 seconds
[2024-05-28T14:06:50.123+0000] {processor.py:161} INFO - Started process (PID=3899) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:06:50.125+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:06:50.127+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:06:50.127+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:06:50.145+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:06:50.166+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.053 seconds
[2024-05-28T14:07:20.593+0000] {processor.py:161} INFO - Started process (PID=3909) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:07:20.594+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:07:20.595+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:07:20.595+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:07:20.609+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:07:20.626+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.041 seconds
[2024-05-28T14:07:51.047+0000] {processor.py:161} INFO - Started process (PID=3920) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:07:51.048+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:07:51.050+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:07:51.049+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:07:51.063+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:07:51.080+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.040 seconds
[2024-05-28T14:08:21.413+0000] {processor.py:161} INFO - Started process (PID=3930) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:08:21.414+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:08:21.416+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:08:21.415+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:08:21.429+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:08:21.447+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.041 seconds
[2024-05-28T14:08:52.051+0000] {processor.py:161} INFO - Started process (PID=3940) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:08:52.052+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:08:52.054+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:08:52.053+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:08:52.069+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:08:52.090+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.048 seconds
[2024-05-28T14:09:22.426+0000] {processor.py:161} INFO - Started process (PID=3950) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:09:22.427+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:09:22.428+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:09:22.428+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:09:22.439+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:09:22.457+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.039 seconds
[2024-05-28T14:09:52.820+0000] {processor.py:161} INFO - Started process (PID=3960) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:09:52.821+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:09:52.823+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:09:52.822+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:09:52.836+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:09:52.855+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.043 seconds
[2024-05-28T14:10:23.312+0000] {processor.py:161} INFO - Started process (PID=3970) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:10:23.313+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:10:23.315+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:10:23.314+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:10:23.329+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:10:23.353+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.050 seconds
[2024-05-28T14:10:53.961+0000] {processor.py:161} INFO - Started process (PID=3980) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:10:53.962+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:10:53.965+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:10:53.964+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:10:53.993+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:10:54.024+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.074 seconds
[2024-05-28T14:11:24.429+0000] {processor.py:161} INFO - Started process (PID=3990) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:11:24.430+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:11:24.432+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:11:24.431+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:11:24.448+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:11:24.470+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T14:11:54.907+0000] {processor.py:161} INFO - Started process (PID=4000) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:11:54.909+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:11:54.911+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:11:54.910+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:11:54.928+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:11:54.944+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.048 seconds
[2024-05-28T14:12:25.279+0000] {processor.py:161} INFO - Started process (PID=4010) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:12:25.280+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:12:25.282+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:12:25.282+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:12:25.297+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:12:25.312+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.040 seconds
[2024-05-28T14:12:55.657+0000] {processor.py:161} INFO - Started process (PID=4020) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:12:55.658+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:12:55.659+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:12:55.659+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:12:55.675+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:12:55.691+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.043 seconds
[2024-05-28T14:13:26.220+0000] {processor.py:161} INFO - Started process (PID=4030) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:13:26.224+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:13:26.227+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:13:26.226+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:13:26.271+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:13:26.307+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.099 seconds
[2024-05-28T14:13:56.885+0000] {processor.py:161} INFO - Started process (PID=4041) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:13:56.898+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:13:56.902+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:13:56.901+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:13:56.943+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:13:57.016+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.170 seconds
[2024-05-28T14:14:27.898+0000] {processor.py:161} INFO - Started process (PID=4051) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:14:27.900+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:14:27.902+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:14:27.902+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:14:27.921+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:14:27.944+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.057 seconds
[2024-05-28T14:14:58.276+0000] {processor.py:161} INFO - Started process (PID=4061) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:14:58.277+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:14:58.278+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:14:58.278+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:14:58.295+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:14:58.309+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.040 seconds
[2024-05-28T14:15:28.709+0000] {processor.py:161} INFO - Started process (PID=4071) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:15:28.712+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:15:28.714+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:15:28.714+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:15:28.737+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:15:28.766+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.072 seconds
[2024-05-28T14:15:59.202+0000] {processor.py:161} INFO - Started process (PID=4081) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:15:59.204+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:15:59.206+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:15:59.206+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:15:59.231+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:15:59.252+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.065 seconds
[2024-05-28T14:16:29.610+0000] {processor.py:161} INFO - Started process (PID=4091) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:16:29.611+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:16:29.613+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:16:29.612+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:16:29.628+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:16:29.648+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.046 seconds
[2024-05-28T14:17:00.411+0000] {processor.py:161} INFO - Started process (PID=4101) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:17:00.418+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:17:00.422+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:17:00.421+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:17:00.450+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:17:00.498+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.106 seconds
[2024-05-28T14:17:31.057+0000] {processor.py:161} INFO - Started process (PID=4111) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:17:31.059+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:17:31.060+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:17:31.060+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:17:31.077+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:17:31.101+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.052 seconds
[2024-05-28T14:18:01.545+0000] {processor.py:161} INFO - Started process (PID=4121) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:18:01.547+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:18:01.548+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:18:01.548+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:18:01.565+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:18:01.586+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T14:18:32.353+0000] {processor.py:161} INFO - Started process (PID=4131) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:18:32.359+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:18:32.362+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:18:32.361+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:18:32.384+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:18:32.422+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.095 seconds
[2024-05-28T14:19:03.053+0000] {processor.py:161} INFO - Started process (PID=4141) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:19:03.055+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:19:03.057+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:19:03.057+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:19:03.077+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:19:03.096+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.054 seconds
[2024-05-28T14:19:33.860+0000] {processor.py:161} INFO - Started process (PID=4151) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:19:33.864+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:19:33.867+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:19:33.866+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:19:33.898+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:19:33.943+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.107 seconds
[2024-05-28T14:20:04.346+0000] {processor.py:161} INFO - Started process (PID=4161) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:20:04.347+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:20:04.348+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:20:04.348+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:20:04.366+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:20:04.385+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T14:20:34.901+0000] {processor.py:161} INFO - Started process (PID=4171) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:20:34.903+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:20:34.909+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:20:34.905+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:20:34.965+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:20:35.018+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.141 seconds
[2024-05-28T14:21:05.755+0000] {processor.py:161} INFO - Started process (PID=4181) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:21:05.757+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:21:05.758+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:21:05.758+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:21:05.778+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:21:05.812+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.067 seconds
[2024-05-28T14:21:36.271+0000] {processor.py:161} INFO - Started process (PID=4191) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:21:36.273+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:21:36.274+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:21:36.274+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:21:36.289+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:21:36.308+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.044 seconds
[2024-05-28T14:22:06.672+0000] {processor.py:161} INFO - Started process (PID=4202) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:22:06.673+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:22:06.675+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:22:06.674+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:22:06.692+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:22:06.719+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.055 seconds
[2024-05-28T14:22:37.235+0000] {processor.py:161} INFO - Started process (PID=4213) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:22:37.237+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:22:37.239+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:22:37.238+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:22:37.255+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:22:37.272+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.045 seconds
[2024-05-28T14:23:07.733+0000] {processor.py:161} INFO - Started process (PID=4223) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:23:07.734+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:23:07.736+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:23:07.735+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:23:07.753+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:23:07.773+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.048 seconds
[2024-05-28T14:23:38.252+0000] {processor.py:161} INFO - Started process (PID=4233) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:23:38.254+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:23:38.257+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:23:38.256+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:23:38.279+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:23:38.302+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.067 seconds
[2024-05-28T14:24:08.716+0000] {processor.py:161} INFO - Started process (PID=4243) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:24:08.720+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:24:08.722+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:24:08.721+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:24:08.744+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:24:08.778+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.078 seconds
[2024-05-28T14:24:39.134+0000] {processor.py:161} INFO - Started process (PID=4253) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:24:39.135+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:24:39.136+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:24:39.136+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:24:39.152+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:24:39.172+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.046 seconds
[2024-05-28T14:25:09.554+0000] {processor.py:161} INFO - Started process (PID=4263) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:25:09.556+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:25:09.560+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:25:09.559+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:25:09.579+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:25:09.600+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.059 seconds
[2024-05-28T14:25:40.107+0000] {processor.py:161} INFO - Started process (PID=4273) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:25:40.108+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:25:40.110+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:25:40.109+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:25:40.122+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:25:40.138+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.039 seconds
[2024-05-28T14:26:10.587+0000] {processor.py:161} INFO - Started process (PID=4283) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:26:10.590+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:26:10.601+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:26:10.600+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:26:10.642+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:26:10.689+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.125 seconds
[2024-05-28T14:26:41.136+0000] {processor.py:161} INFO - Started process (PID=4294) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:26:41.137+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:26:41.139+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:26:41.138+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:26:41.157+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:26:41.179+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T14:27:11.568+0000] {processor.py:161} INFO - Started process (PID=4304) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:27:11.569+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:27:11.571+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:27:11.571+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:27:11.593+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:27:11.614+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.056 seconds
[2024-05-28T14:27:41.996+0000] {processor.py:161} INFO - Started process (PID=4314) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:27:41.998+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:27:42.000+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:27:41.999+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:27:42.022+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:27:42.046+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.060 seconds
[2024-05-28T14:28:12.485+0000] {processor.py:161} INFO - Started process (PID=4324) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:28:12.486+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:28:12.488+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:28:12.487+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:28:12.505+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:28:12.527+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.052 seconds
[2024-05-28T14:28:43.019+0000] {processor.py:161} INFO - Started process (PID=4335) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:28:43.020+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:28:43.022+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:28:43.021+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:28:43.039+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:28:43.060+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.052 seconds
[2024-05-28T14:29:13.708+0000] {processor.py:161} INFO - Started process (PID=4345) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:29:13.710+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:29:13.711+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:29:13.711+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:29:13.729+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:29:13.756+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.057 seconds
[2024-05-28T14:29:44.215+0000] {processor.py:161} INFO - Started process (PID=4355) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:29:44.217+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:29:44.218+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:29:44.217+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:29:44.234+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:29:44.256+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T14:30:14.687+0000] {processor.py:161} INFO - Started process (PID=4365) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:30:14.689+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:30:14.691+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:30:14.690+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:30:14.713+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:30:14.765+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.093 seconds
[2024-05-28T14:30:45.171+0000] {processor.py:161} INFO - Started process (PID=4375) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:30:45.172+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:30:45.174+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:30:45.173+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:30:45.188+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:30:45.207+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.044 seconds
[2024-05-28T14:31:15.629+0000] {processor.py:161} INFO - Started process (PID=4385) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:31:15.630+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:31:15.631+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:31:15.631+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:31:15.644+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:31:15.657+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.038 seconds
[2024-05-28T14:31:46.188+0000] {processor.py:161} INFO - Started process (PID=4395) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:31:46.190+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:31:46.195+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:31:46.193+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:31:46.235+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:31:46.283+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.113 seconds
[2024-05-28T14:32:16.787+0000] {processor.py:161} INFO - Started process (PID=4405) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:32:16.789+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:32:16.790+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:32:16.790+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:32:16.812+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:32:16.838+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.059 seconds
[2024-05-28T14:32:47.428+0000] {processor.py:161} INFO - Started process (PID=4422) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:32:47.431+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:32:47.433+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:32:47.432+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:32:47.451+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:32:47.483+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.065 seconds
[2024-05-28T14:33:18.080+0000] {processor.py:161} INFO - Started process (PID=4432) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:33:18.088+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:33:18.091+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:33:18.090+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:33:18.123+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:33:18.167+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.115 seconds
[2024-05-28T14:33:48.938+0000] {processor.py:161} INFO - Started process (PID=4443) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:33:48.940+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:33:48.943+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:33:48.942+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:33:48.965+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:33:48.986+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.058 seconds
[2024-05-28T14:34:19.423+0000] {processor.py:161} INFO - Started process (PID=4454) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:34:19.426+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:34:19.429+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:34:19.428+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:34:19.457+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:34:19.490+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.083 seconds
[2024-05-28T14:34:50.116+0000] {processor.py:161} INFO - Started process (PID=4464) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:34:50.119+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:34:50.122+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:34:50.121+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:34:50.160+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:34:50.230+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.135 seconds
[2024-05-28T14:35:20.965+0000] {processor.py:161} INFO - Started process (PID=4474) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:35:20.977+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:35:20.981+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:35:20.979+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:35:21.072+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:35:21.139+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.199 seconds
[2024-05-28T14:35:51.450+0000] {processor.py:161} INFO - Started process (PID=4484) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:35:51.452+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:35:51.454+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:35:51.454+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:35:51.473+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:35:51.497+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.059 seconds
[2024-05-28T14:36:22.024+0000] {processor.py:161} INFO - Started process (PID=4494) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:36:22.027+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:36:22.030+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:36:22.029+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:36:22.057+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:36:22.081+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.073 seconds
[2024-05-28T14:36:52.523+0000] {processor.py:161} INFO - Started process (PID=4504) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:36:52.525+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:36:52.527+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:36:52.527+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:36:52.547+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:36:52.569+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.055 seconds
[2024-05-28T14:37:23.032+0000] {processor.py:161} INFO - Started process (PID=4514) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:37:23.033+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:37:23.034+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:37:23.034+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:37:23.049+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:37:23.067+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.044 seconds
[2024-05-28T14:37:53.456+0000] {processor.py:161} INFO - Started process (PID=4524) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:37:53.458+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:37:53.461+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:37:53.460+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:37:53.488+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:37:53.520+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.076 seconds
[2024-05-28T14:38:23.971+0000] {processor.py:161} INFO - Started process (PID=4534) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:38:23.972+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:38:23.974+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:38:23.974+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:38:23.995+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:38:24.024+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.067 seconds
[2024-05-28T14:38:54.831+0000] {processor.py:161} INFO - Started process (PID=4544) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:38:54.833+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:38:54.834+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:38:54.834+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:38:54.851+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:38:54.871+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T14:39:25.399+0000] {processor.py:161} INFO - Started process (PID=4554) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:39:25.400+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:39:25.403+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:39:25.402+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:39:25.425+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:39:25.453+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.068 seconds
[2024-05-28T14:39:55.916+0000] {processor.py:161} INFO - Started process (PID=4565) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:39:55.918+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:39:55.920+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:39:55.919+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:39:55.939+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:39:55.972+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.074 seconds
[2024-05-28T14:40:26.602+0000] {processor.py:161} INFO - Started process (PID=4576) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:40:26.605+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:40:26.620+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:40:26.619+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:40:26.657+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:40:26.705+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.126 seconds
[2024-05-28T14:40:57.191+0000] {processor.py:161} INFO - Started process (PID=4586) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:40:57.193+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:40:57.195+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:40:57.194+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:40:57.212+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:40:57.236+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.061 seconds
[2024-05-28T14:41:28.022+0000] {processor.py:161} INFO - Started process (PID=4596) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:41:28.030+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:41:28.044+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:41:28.040+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:41:28.110+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:41:28.208+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.262 seconds
[2024-05-28T14:41:58.989+0000] {processor.py:161} INFO - Started process (PID=4606) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:41:58.991+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:41:58.993+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:41:58.992+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:41:59.013+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:41:59.036+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.057 seconds
[2024-05-28T14:42:29.516+0000] {processor.py:161} INFO - Started process (PID=4616) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:42:29.518+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:42:29.519+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:42:29.519+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:42:29.539+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:42:29.560+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.053 seconds
[2024-05-28T14:43:00.520+0000] {processor.py:161} INFO - Started process (PID=4626) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:43:00.524+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:43:00.530+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:43:00.527+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:43:00.564+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:43:00.632+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.164 seconds
[2024-05-28T14:43:30.821+0000] {processor.py:161} INFO - Started process (PID=4636) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:43:30.823+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:43:30.825+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:43:30.824+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:43:30.849+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:43:30.906+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.102 seconds
[2024-05-28T14:44:01.389+0000] {processor.py:161} INFO - Started process (PID=4646) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:44:01.391+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:44:01.392+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:44:01.392+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:44:01.413+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:44:01.434+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.055 seconds
[2024-05-28T14:44:32.337+0000] {processor.py:161} INFO - Started process (PID=4656) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:44:32.340+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:44:32.344+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:44:32.343+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:44:32.378+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:44:32.421+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.113 seconds
[2024-05-28T14:45:03.158+0000] {processor.py:161} INFO - Started process (PID=4667) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:45:03.160+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:45:03.163+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:45:03.162+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:45:03.186+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:45:03.216+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.076 seconds
[2024-05-28T14:45:34.104+0000] {processor.py:161} INFO - Started process (PID=4677) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:45:34.107+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:45:34.112+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:45:34.110+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:45:34.182+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:45:34.293+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.228 seconds
[2024-05-28T14:46:05.242+0000] {processor.py:161} INFO - Started process (PID=4689) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:46:05.244+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:46:05.246+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:46:05.245+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:46:05.263+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:46:05.292+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.058 seconds
[2024-05-28T14:46:35.734+0000] {processor.py:161} INFO - Started process (PID=4699) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:46:35.736+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:46:35.737+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:46:35.737+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:46:35.755+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:46:35.775+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.050 seconds
[2024-05-28T14:47:06.364+0000] {processor.py:161} INFO - Started process (PID=4709) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:47:06.367+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:47:06.370+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:47:06.369+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:47:06.399+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:47:06.429+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.079 seconds
[2024-05-28T14:47:36.907+0000] {processor.py:161} INFO - Started process (PID=4719) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:47:36.911+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:47:36.917+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:47:36.916+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:47:36.954+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:47:36.992+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.105 seconds
[2024-05-28T14:48:07.579+0000] {processor.py:161} INFO - Started process (PID=4729) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:48:07.581+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:48:07.582+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:48:07.582+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:48:07.599+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:48:07.623+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.065 seconds
[2024-05-28T14:48:38.085+0000] {processor.py:161} INFO - Started process (PID=4739) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:48:38.086+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:48:38.088+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:48:38.087+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:48:38.105+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:48:38.125+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.050 seconds
[2024-05-28T14:49:09.122+0000] {processor.py:161} INFO - Started process (PID=4750) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:49:09.124+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:49:09.126+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:49:09.125+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:49:09.143+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:49:09.163+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T14:49:39.638+0000] {processor.py:161} INFO - Started process (PID=4760) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:49:39.640+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:49:39.641+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:49:39.641+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:49:39.660+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:49:39.706+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.079 seconds
[2024-05-28T14:50:10.267+0000] {processor.py:161} INFO - Started process (PID=4771) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:50:10.269+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:50:10.271+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:50:10.270+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:50:10.295+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:50:10.345+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.090 seconds
[2024-05-28T14:50:40.988+0000] {processor.py:161} INFO - Started process (PID=4781) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:50:40.991+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:50:40.995+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:50:40.993+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:50:41.019+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:50:41.054+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.084 seconds
[2024-05-28T14:51:11.340+0000] {processor.py:161} INFO - Started process (PID=4791) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:51:11.342+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:51:11.343+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:51:11.342+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:51:11.355+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:51:11.376+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.043 seconds
[2024-05-28T14:51:41.772+0000] {processor.py:161} INFO - Started process (PID=4801) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:51:41.773+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:51:41.775+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:51:41.774+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:51:41.789+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:51:41.805+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.043 seconds
[2024-05-28T14:52:12.931+0000] {processor.py:161} INFO - Started process (PID=4811) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:52:12.938+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:52:12.951+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:52:12.948+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:52:13.383+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:52:13.660+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.801 seconds
[2024-05-28T14:52:43.973+0000] {processor.py:161} INFO - Started process (PID=4821) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:52:43.974+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:52:43.976+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:52:43.975+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:52:43.992+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:52:44.011+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.046 seconds
[2024-05-28T14:53:14.394+0000] {processor.py:161} INFO - Started process (PID=4831) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:53:14.395+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:53:14.397+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:53:14.396+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:53:14.412+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:53:14.427+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.040 seconds
[2024-05-28T14:53:44.805+0000] {processor.py:161} INFO - Started process (PID=4841) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:53:44.807+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:53:44.809+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:53:44.808+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:53:44.831+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:53:44.852+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.058 seconds
[2024-05-28T14:54:15.462+0000] {processor.py:161} INFO - Started process (PID=4851) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:54:15.466+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:54:15.468+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:54:15.468+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:54:15.486+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:54:15.505+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T14:54:46.123+0000] {processor.py:161} INFO - Started process (PID=4861) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:54:46.130+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:54:46.138+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:54:46.136+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:54:46.219+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:54:46.276+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.174 seconds
[2024-05-28T14:55:16.759+0000] {processor.py:161} INFO - Started process (PID=4871) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:55:16.762+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:55:16.765+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:55:16.764+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:55:16.801+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:55:16.827+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.087 seconds
[2024-05-28T14:55:47.415+0000] {processor.py:161} INFO - Started process (PID=4881) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:55:47.417+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:55:47.419+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:55:47.418+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:55:47.439+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:55:47.459+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.055 seconds
[2024-05-28T14:56:18.040+0000] {processor.py:161} INFO - Started process (PID=4891) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:56:18.041+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:56:18.043+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:56:18.042+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:56:18.061+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:56:18.081+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T14:56:48.490+0000] {processor.py:161} INFO - Started process (PID=4901) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:56:48.492+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:56:48.494+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:56:48.493+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:56:48.516+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:56:48.540+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.061 seconds
[2024-05-28T14:57:19.142+0000] {processor.py:161} INFO - Started process (PID=4912) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:57:19.144+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:57:19.146+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:57:19.145+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:57:19.165+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:57:19.184+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T14:57:49.694+0000] {processor.py:161} INFO - Started process (PID=4923) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:57:49.696+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:57:49.699+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:57:49.698+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:57:49.723+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:57:49.763+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.084 seconds
[2024-05-28T14:58:20.333+0000] {processor.py:161} INFO - Started process (PID=4933) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:58:20.337+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:58:20.339+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:58:20.338+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:58:20.371+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:58:20.418+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.105 seconds
[2024-05-28T14:58:51.232+0000] {processor.py:161} INFO - Started process (PID=4944) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:58:51.234+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:58:51.236+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:58:51.235+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:58:51.252+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:58:51.270+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.048 seconds
[2024-05-28T14:59:21.644+0000] {processor.py:161} INFO - Started process (PID=4955) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:59:21.645+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:59:21.647+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:59:21.647+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:59:21.665+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:59:21.688+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.053 seconds
[2024-05-28T14:59:52.175+0000] {processor.py:161} INFO - Started process (PID=4965) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T14:59:52.176+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T14:59:52.178+0000] {logging_mixin.py:188} INFO - [2024-05-28T14:59:52.177+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T14:59:52.196+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T14:59:52.215+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T15:00:22.731+0000] {processor.py:161} INFO - Started process (PID=4975) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:00:22.733+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:00:22.734+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:00:22.734+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:00:22.752+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:00:22.771+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.049 seconds
[2024-05-28T15:00:53.409+0000] {processor.py:161} INFO - Started process (PID=4985) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:00:53.411+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:00:53.415+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:00:53.414+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:00:53.445+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:00:53.484+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.093 seconds
[2024-05-28T15:01:23.975+0000] {processor.py:161} INFO - Started process (PID=4995) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:01:23.977+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:01:23.979+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:01:23.978+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:01:24.004+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:01:24.035+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.072 seconds
[2024-05-28T15:01:54.499+0000] {processor.py:161} INFO - Started process (PID=5005) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:01:54.500+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:01:54.502+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:01:54.501+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:01:54.518+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:01:54.538+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.048 seconds
[2024-05-28T15:02:24.959+0000] {processor.py:161} INFO - Started process (PID=5015) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:02:24.961+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:02:24.965+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:02:24.964+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:02:24.989+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:02:25.018+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.070 seconds
[2024-05-28T15:02:55.444+0000] {processor.py:161} INFO - Started process (PID=5026) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:02:55.446+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:02:55.448+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:02:55.448+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:02:55.469+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:02:55.495+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.062 seconds
[2024-05-28T15:03:25.867+0000] {processor.py:161} INFO - Started process (PID=5036) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:03:25.869+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:03:25.870+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:03:25.870+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:03:25.886+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:03:25.906+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.048 seconds
[2024-05-28T15:03:56.656+0000] {processor.py:161} INFO - Started process (PID=5046) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:03:56.658+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:03:56.659+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:03:56.659+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:03:56.676+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:03:56.699+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.052 seconds
[2024-05-28T15:04:27.266+0000] {processor.py:161} INFO - Started process (PID=5056) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:04:27.268+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:04:27.270+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:04:27.269+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:04:27.294+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:04:27.323+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.070 seconds
[2024-05-28T15:04:57.842+0000] {processor.py:161} INFO - Started process (PID=5067) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:04:57.845+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:04:57.847+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:04:57.846+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:04:57.878+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:04:57.916+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.087 seconds
[2024-05-28T15:05:28.482+0000] {processor.py:161} INFO - Started process (PID=5077) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:05:28.485+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:05:28.487+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:05:28.486+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:05:28.518+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:05:28.552+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.082 seconds
[2024-05-28T15:05:59.067+0000] {processor.py:161} INFO - Started process (PID=5087) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:05:59.069+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:05:59.071+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:05:59.070+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:05:59.093+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:05:59.117+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.058 seconds
[2024-05-28T15:06:29.651+0000] {processor.py:161} INFO - Started process (PID=5097) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:06:29.654+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:06:29.657+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:06:29.656+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:06:29.713+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:06:29.749+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.117 seconds
[2024-05-28T15:07:00.715+0000] {processor.py:161} INFO - Started process (PID=5107) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:07:00.725+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:07:00.737+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:07:00.731+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:07:00.811+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:07:00.921+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.281 seconds
[2024-05-28T15:07:31.723+0000] {processor.py:161} INFO - Started process (PID=5117) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:07:31.726+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:07:31.728+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:07:31.727+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:07:31.777+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:07:31.841+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.136 seconds
[2024-05-28T15:08:02.404+0000] {processor.py:161} INFO - Started process (PID=5128) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:08:02.405+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:08:02.407+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:08:02.407+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:08:02.423+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:08:02.440+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.046 seconds
[2024-05-28T15:08:32.859+0000] {processor.py:161} INFO - Started process (PID=5138) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:08:32.861+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:08:32.863+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:08:32.862+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:08:32.881+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:08:32.902+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T15:09:03.618+0000] {processor.py:161} INFO - Started process (PID=5148) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:09:03.621+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:09:03.625+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:09:03.623+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:09:03.651+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:09:03.681+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.077 seconds
[2024-05-28T15:09:34.429+0000] {processor.py:161} INFO - Started process (PID=5158) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:09:34.431+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:09:34.434+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:09:34.433+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:09:34.452+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:09:34.474+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.065 seconds
[2024-05-28T15:10:05.018+0000] {processor.py:161} INFO - Started process (PID=5168) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:10:05.020+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:10:05.021+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:10:05.021+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:10:05.040+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:10:05.061+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.053 seconds
[2024-05-28T15:10:35.606+0000] {processor.py:161} INFO - Started process (PID=5178) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:10:35.608+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:10:35.611+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:10:35.610+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:10:35.634+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:10:35.655+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.060 seconds
[2024-05-28T15:11:06.323+0000] {processor.py:161} INFO - Started process (PID=5195) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:11:06.324+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:11:06.361+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:11:06.360+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:11:06.442+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:11:06.506+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.210 seconds
[2024-05-28T15:11:37.191+0000] {processor.py:161} INFO - Started process (PID=5205) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:11:37.193+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:11:37.195+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:11:37.194+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:11:37.224+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:11:37.257+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.081 seconds
[2024-05-28T15:12:07.782+0000] {processor.py:161} INFO - Started process (PID=5215) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:12:07.785+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:12:07.787+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:12:07.786+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:12:07.813+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:12:07.843+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.078 seconds
[2024-05-28T15:12:38.434+0000] {processor.py:161} INFO - Started process (PID=5225) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:12:38.438+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:12:38.444+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:12:38.441+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:12:38.486+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:12:38.520+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.099 seconds
[2024-05-28T15:13:09.203+0000] {processor.py:161} INFO - Started process (PID=5235) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:13:09.206+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:13:09.208+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:13:09.207+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:13:09.232+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:13:09.256+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.063 seconds
[2024-05-28T15:13:39.715+0000] {processor.py:161} INFO - Started process (PID=5246) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:13:39.718+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:13:39.720+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:13:39.719+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:13:39.746+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:13:39.770+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.066 seconds
[2024-05-28T15:14:09.987+0000] {processor.py:161} INFO - Started process (PID=5256) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:14:09.989+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:14:09.992+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:14:09.991+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:14:10.023+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:14:10.057+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.092 seconds
[2024-05-28T15:14:40.680+0000] {processor.py:161} INFO - Started process (PID=5266) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:14:40.683+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:14:40.686+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:14:40.685+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:14:40.716+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:14:40.752+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.085 seconds
[2024-05-28T15:15:11.313+0000] {processor.py:161} INFO - Started process (PID=5276) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:15:11.317+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:15:11.320+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:15:11.320+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:15:11.347+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:15:11.376+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.076 seconds
[2024-05-28T15:15:42.582+0000] {processor.py:161} INFO - Started process (PID=5286) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:15:42.598+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:15:42.618+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:15:42.607+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:15:42.677+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:15:42.799+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.420 seconds
[2024-05-28T15:16:13.738+0000] {processor.py:161} INFO - Started process (PID=5297) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:16:13.740+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:16:13.744+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:16:13.742+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:16:13.791+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:16:13.823+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.107 seconds
[2024-05-28T15:16:44.337+0000] {processor.py:161} INFO - Started process (PID=5307) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:16:44.339+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:16:44.343+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:16:44.342+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:16:44.365+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:16:44.402+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.081 seconds
[2024-05-28T15:17:15.219+0000] {processor.py:161} INFO - Started process (PID=5317) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:17:15.221+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:17:15.225+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:17:15.224+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:17:15.261+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:17:15.290+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.089 seconds
[2024-05-28T15:17:45.810+0000] {processor.py:161} INFO - Started process (PID=5328) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:17:45.812+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:17:45.815+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:17:45.814+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:17:45.838+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:17:45.870+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.073 seconds
[2024-05-28T15:18:16.282+0000] {processor.py:161} INFO - Started process (PID=5338) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:18:16.283+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:18:16.284+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:18:16.284+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:18:16.298+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:18:16.314+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.041 seconds
[2024-05-28T15:18:46.688+0000] {processor.py:161} INFO - Started process (PID=5348) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:18:46.690+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:18:46.691+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:18:46.691+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:18:46.708+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:18:46.728+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.051 seconds
[2024-05-28T15:19:17.595+0000] {processor.py:161} INFO - Started process (PID=5358) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:19:17.597+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:19:17.600+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:19:17.599+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:19:17.627+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:19:17.675+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.096 seconds
[2024-05-28T15:19:48.207+0000] {processor.py:161} INFO - Started process (PID=5368) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:19:48.209+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:19:48.211+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:19:48.210+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:19:48.237+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:19:48.262+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.070 seconds
[2024-05-28T15:20:18.714+0000] {processor.py:161} INFO - Started process (PID=5378) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:20:18.716+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:20:18.719+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:20:18.718+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:20:18.737+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:20:18.757+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.057 seconds
[2024-05-28T15:20:49.346+0000] {processor.py:161} INFO - Started process (PID=5388) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:20:49.348+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:20:49.351+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:20:49.350+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:20:49.377+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:20:49.421+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.092 seconds
[2024-05-28T15:21:20.418+0000] {processor.py:161} INFO - Started process (PID=5398) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:21:20.424+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:21:20.429+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:21:20.428+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:21:20.456+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:21:20.490+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.091 seconds
[2024-05-28T15:21:51.087+0000] {processor.py:161} INFO - Started process (PID=5408) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:21:51.090+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:21:51.092+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:21:51.092+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:21:51.126+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:21:51.150+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.082 seconds
[2024-05-28T15:22:21.653+0000] {processor.py:161} INFO - Started process (PID=5419) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:22:21.655+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:22:21.657+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:22:21.656+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:22:21.676+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:22:21.694+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.050 seconds
[2024-05-28T15:22:52.187+0000] {processor.py:161} INFO - Started process (PID=5429) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:22:52.189+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:22:52.191+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:22:52.190+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:22:52.211+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:22:52.236+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.061 seconds
[2024-05-28T15:23:22.470+0000] {processor.py:161} INFO - Started process (PID=5439) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:23:22.473+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:23:22.475+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:23:22.475+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:23:22.503+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:23:22.542+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.086 seconds
[2024-05-28T15:23:30.961+0000] {processor.py:161} INFO - Started process (PID=5441) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:23:30.964+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:23:30.967+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:23:30.966+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:23:31.213+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:23:31.219+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:23:31.223+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:23:31.227+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:23:31.232+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:23:31.238+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:23:31.244+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:23:31.248+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:23:31.385+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:23:32.276+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:23:32.275+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:23:32.341+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:23:32.340+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:23:32.464+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.521 seconds
[2024-05-28T15:24:02.661+0000] {processor.py:161} INFO - Started process (PID=5451) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:24:02.663+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:24:02.664+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:24:02.664+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:24:02.708+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:24:02.712+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:24:02.718+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:24:02.721+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:24:02.725+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:24:02.729+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:24:02.733+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:24:02.736+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:24:02.757+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:24:02.808+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:24:02.808+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:24:02.827+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:24:02.827+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:24:02.852+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.201 seconds
[2024-05-28T15:48:27.312+0000] {processor.py:161} INFO - Started process (PID=37) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:48:27.418+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:48:27.543+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:48:27.543+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:48:27.717+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:48:27.729+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:48:27.742+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:48:27.751+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:48:27.767+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:48:27.780+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:48:27.799+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:48:27.818+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:48:27.882+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:48:35.482+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:48:35.480+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:48:35.525+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:48:35.525+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:48:35.580+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 8.413 seconds
[2024-05-28T15:49:06.625+0000] {processor.py:161} INFO - Started process (PID=50) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:49:06.627+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:49:06.633+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:49:06.632+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:49:06.825+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:49:06.834+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:49:06.841+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:49:06.850+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:49:06.858+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:49:06.868+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:49:06.874+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:49:06.888+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:49:07.200+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:49:07.478+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:49:07.477+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:49:07.634+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:49:07.634+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:49:07.708+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.092 seconds
[2024-05-28T15:49:38.221+0000] {processor.py:161} INFO - Started process (PID=60) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:49:38.225+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:49:38.230+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:49:38.228+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:49:38.262+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:49:38.266+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:49:38.269+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:49:38.274+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:49:38.278+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:49:38.281+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:49:38.284+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:49:38.287+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:49:38.306+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:49:38.347+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:49:38.346+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:49:38.364+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:49:38.364+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:49:38.394+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.181 seconds
[2024-05-28T15:50:08.724+0000] {processor.py:161} INFO - Started process (PID=70) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:50:08.726+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:50:08.728+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:50:08.728+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:50:08.751+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:50:08.754+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:50:08.757+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:50:08.761+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:50:08.765+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:50:08.768+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:50:08.771+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:50:08.774+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:50:08.787+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:50:08.830+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:50:08.830+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:50:08.853+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:50:08.853+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:50:11.265+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 2.553 seconds
[2024-05-28T15:50:41.442+0000] {processor.py:161} INFO - Started process (PID=80) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:50:41.447+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:50:41.460+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:50:41.458+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:50:41.569+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:50:41.573+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:50:41.577+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:50:41.581+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:50:41.586+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:50:41.590+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:50:41.595+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:50:41.599+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:50:41.697+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:50:41.805+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:50:41.805+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:50:41.876+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:50:41.876+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:50:41.927+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.511 seconds
[2024-05-28T15:51:12.732+0000] {processor.py:161} INFO - Started process (PID=90) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:51:12.734+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:51:12.740+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:51:12.739+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:51:12.800+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:51:12.808+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:51:12.814+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:51:12.821+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:51:12.827+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:51:12.833+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:51:12.839+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:51:12.844+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:51:12.907+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:51:13.037+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:51:13.036+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:51:13.098+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:51:13.097+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:51:13.158+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.437 seconds
[2024-05-28T15:51:43.419+0000] {processor.py:161} INFO - Started process (PID=100) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:51:43.421+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:51:43.426+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:51:43.425+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:51:43.472+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:51:43.479+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:51:43.486+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:51:43.495+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:51:43.501+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:51:43.507+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:51:43.513+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:51:43.521+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:51:43.558+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:51:43.644+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:51:43.644+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:51:43.707+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:51:43.706+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:51:43.775+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.369 seconds
[2024-05-28T15:52:15.778+0000] {processor.py:161} INFO - Started process (PID=110) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:52:15.886+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:52:16.017+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:52:16.008+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:52:17.042+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:52:17.050+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:52:17.059+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:52:17.078+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:52:17.087+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:52:17.115+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:52:17.127+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:52:17.136+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:52:17.192+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:52:17.717+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:52:17.717+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:52:17.859+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:52:17.859+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:52:27.811+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 12.422 seconds
[2024-05-28T15:52:59.166+0000] {processor.py:161} INFO - Started process (PID=120) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:52:59.181+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:52:59.277+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:52:59.270+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:53:00.117+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:53:00.161+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:53:00.211+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:53:00.228+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:53:00.246+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:53:00.260+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:53:00.269+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:53:00.278+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:53:00.622+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:53:01.283+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:53:01.282+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:53:01.573+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:53:01.560+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:53:01.825+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 3.069 seconds
[2024-05-28T15:53:33.534+0000] {processor.py:161} INFO - Started process (PID=130) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:53:33.545+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:53:33.630+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:53:33.629+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:53:33.960+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:53:33.978+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:53:33.987+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:53:33.998+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:53:34.018+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:53:34.033+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:53:34.040+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:53:34.050+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:53:34.225+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:53:34.498+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:53:34.497+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:53:34.685+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:53:34.685+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:53:34.885+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.925 seconds
[2024-05-28T15:54:05.704+0000] {processor.py:161} INFO - Started process (PID=147) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:54:05.718+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:54:05.728+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:54:05.726+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:54:05.859+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:54:05.867+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:54:05.900+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:54:05.910+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:54:05.918+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:54:05.927+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:54:05.935+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:54:05.950+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:54:06.040+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:54:06.201+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:54:06.200+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:54:06.267+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:54:06.266+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:54:06.323+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.656 seconds
[2024-05-28T15:54:36.788+0000] {processor.py:161} INFO - Started process (PID=158) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:54:36.792+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:54:36.797+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:54:36.796+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:54:36.905+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:54:36.916+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:54:36.933+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:54:36.955+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:54:36.965+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:54:36.987+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:54:37.010+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:54:37.050+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:54:37.100+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:54:37.251+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:54:37.250+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:54:37.323+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:54:37.323+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:54:45.606+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 8.830 seconds
[2024-05-28T15:55:16.580+0000] {processor.py:161} INFO - Started process (PID=172) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:55:16.583+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:55:16.589+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:55:16.588+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:55:16.931+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:55:16.949+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:55:16.960+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:55:16.967+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:55:16.973+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:55:16.980+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:55:16.987+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:55:16.995+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:55:17.292+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:55:17.512+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:55:17.511+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:55:17.651+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:55:17.650+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:55:17.736+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.179 seconds
[2024-05-28T15:55:48.094+0000] {processor.py:161} INFO - Started process (PID=182) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:55:48.102+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:55:48.138+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:55:48.137+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:55:48.388+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:55:48.413+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:55:48.451+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:55:48.481+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:55:48.515+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:55:48.529+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:55:48.549+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:55:48.569+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:55:48.620+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:55:48.823+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:55:48.822+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:55:49.070+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:55:49.069+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:55:49.490+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.409 seconds
[2024-05-28T15:56:20.348+0000] {processor.py:161} INFO - Started process (PID=192) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:56:20.494+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:56:20.764+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:56:20.728+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:56:21.892+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:56:21.933+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:56:21.952+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:56:21.988+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:56:22.003+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:56:22.019+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:56:22.033+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:56:22.064+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:56:22.401+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:56:22.904+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:56:22.903+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:56:23.284+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:56:23.284+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:56:23.557+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 3.562 seconds
[2024-05-28T15:56:54.108+0000] {processor.py:161} INFO - Started process (PID=203) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:56:54.112+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:56:54.368+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:56:54.312+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:56:54.632+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:56:54.647+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:56:54.656+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:56:54.666+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:56:54.688+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:56:54.697+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:56:54.706+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:56:54.718+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:56:54.832+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:56:55.378+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:56:55.377+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:56:55.872+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:56:55.872+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:56:56.028+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 2.102 seconds
[2024-05-28T15:57:28.117+0000] {processor.py:161} INFO - Started process (PID=213) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:57:28.162+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:57:28.280+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:57:28.273+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:57:28.553+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:57:28.571+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:57:28.585+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:57:28.676+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:57:28.696+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:57:28.714+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:57:28.722+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:57:28.744+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:57:29.050+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:57:29.788+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:57:29.786+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:57:30.049+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:57:30.048+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:57:51.058+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 23.974 seconds
[2024-05-28T15:58:21.733+0000] {processor.py:161} INFO - Started process (PID=229) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:58:21.737+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:58:21.747+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:58:21.746+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:58:21.843+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:58:21.849+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:58:21.862+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:58:21.869+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:58:21.874+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:58:21.880+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:58:21.885+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:58:21.891+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:58:22.081+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:58:22.726+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:58:22.726+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:58:22.768+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:58:22.767+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:58:22.816+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.104 seconds
[2024-05-28T15:58:54.618+0000] {processor.py:161} INFO - Started process (PID=239) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:58:54.636+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:58:54.720+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:58:54.697+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:58:59.932+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:58:59.942+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:58:59.956+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:58:59.963+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:58:59.977+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:58:59.984+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:58:59.995+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:59:00.068+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:59:00.116+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:59:00.255+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:59:00.254+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:59:00.313+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:59:00.312+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:59:00.393+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 5.860 seconds
[2024-05-28T15:59:30.743+0000] {processor.py:161} INFO - Started process (PID=249) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T15:59:30.747+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T15:59:30.759+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:59:30.758+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T15:59:30.826+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T15:59:30.836+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T15:59:30.845+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T15:59:30.857+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T15:59:30.866+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T15:59:30.875+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T15:59:30.881+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T15:59:30.887+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T15:59:30.919+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T15:59:31.023+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:59:31.022+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T15:59:31.067+0000] {logging_mixin.py:188} INFO - [2024-05-28T15:59:31.066+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T15:59:31.237+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.520 seconds
[2024-05-28T16:00:02.246+0000] {processor.py:161} INFO - Started process (PID=260) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:00:02.429+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:00:02.704+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:00:02.681+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:00:03.045+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:00:03.065+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:00:03.075+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:00:03.084+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:00:03.099+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:00:03.110+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:00:03.118+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:00:03.128+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:00:03.313+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:00:03.700+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:00:03.699+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:00:03.810+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:00:03.810+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:00:03.921+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 2.059 seconds
[2024-05-28T16:00:34.935+0000] {processor.py:161} INFO - Started process (PID=271) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:00:34.938+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:00:34.954+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:00:34.953+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:00:35.078+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:00:35.089+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:00:35.104+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:00:35.111+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:00:35.118+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:00:35.125+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:00:35.146+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:00:35.157+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:00:35.202+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:00:35.350+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:00:35.350+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:00:35.409+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:00:35.409+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:00:35.507+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.596 seconds
[2024-05-28T16:01:05.876+0000] {processor.py:161} INFO - Started process (PID=282) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:01:05.880+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:01:05.886+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:01:05.885+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:01:06.012+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:01:06.023+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:01:06.062+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:01:06.079+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:01:06.118+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:01:06.133+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:01:06.143+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:01:06.153+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:01:06.213+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:01:06.436+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:01:06.435+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:01:06.594+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:01:06.593+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:01:06.721+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.862 seconds
[2024-05-28T16:01:37.760+0000] {processor.py:161} INFO - Started process (PID=290) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:01:37.772+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:01:37.836+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:01:37.833+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:01:37.977+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:01:38.025+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:01:38.054+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:01:38.103+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:01:38.110+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:01:38.119+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:01:38.180+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:01:38.202+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:01:38.374+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:01:38.660+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:01:38.659+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:01:38.725+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:01:38.724+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:01:38.826+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.089 seconds
[2024-05-28T16:02:08.961+0000] {processor.py:161} INFO - Started process (PID=301) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:02:08.963+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:02:08.966+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:02:08.966+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:02:09.043+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:02:09.116+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:02:09.148+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:02:09.160+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:02:09.167+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:02:09.174+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:02:09.179+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:02:09.185+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:02:09.213+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:02:09.302+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:02:09.301+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:02:09.330+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:02:09.330+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:02:09.372+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.421 seconds
[2024-05-28T16:02:40.095+0000] {processor.py:161} INFO - Started process (PID=311) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:02:40.097+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:02:40.101+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:02:40.101+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:02:40.164+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:02:40.173+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:02:40.188+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:02:40.198+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:02:40.205+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:02:40.214+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:02:40.220+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:02:40.229+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:02:40.272+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:02:40.373+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:02:40.372+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:02:40.408+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:02:40.407+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:02:40.448+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.371 seconds
[2024-05-28T16:03:10.786+0000] {processor.py:161} INFO - Started process (PID=322) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:03:10.790+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:03:10.803+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:03:10.802+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:03:10.890+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:03:10.898+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:03:10.905+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:03:10.913+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:03:10.920+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:03:10.930+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:03:10.939+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:03:10.957+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:03:10.990+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:03:11.135+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:03:11.134+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:03:11.207+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:03:11.206+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:03:12.170+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.408 seconds
[2024-05-28T16:03:42.747+0000] {processor.py:161} INFO - Started process (PID=332) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:03:42.752+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:03:42.758+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:03:42.757+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:03:42.817+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:03:42.827+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:03:42.834+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:03:42.843+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:03:42.849+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:03:42.854+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:03:42.860+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:03:42.865+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:03:42.902+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:03:43.037+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:03:43.037+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:03:43.125+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:03:43.124+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:03:43.219+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.492 seconds
[2024-05-28T16:04:13.966+0000] {processor.py:161} INFO - Started process (PID=342) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:04:14.001+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:04:14.059+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:04:14.049+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:04:14.392+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:04:14.433+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:04:14.457+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:04:14.506+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:04:14.565+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:04:14.639+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:04:14.660+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:04:14.696+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:04:14.825+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:04:15.147+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:04:15.146+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:04:15.280+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:04:15.273+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:04:15.451+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.510 seconds
[2024-05-28T16:04:46.283+0000] {processor.py:161} INFO - Started process (PID=353) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:04:46.293+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:04:46.322+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:04:46.321+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:04:46.422+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:04:46.429+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:04:46.442+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:04:46.452+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:04:46.460+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:04:46.468+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:04:46.475+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:04:46.486+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:04:46.534+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:04:46.640+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:04:46.638+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:04:46.681+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:04:46.681+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:04:46.747+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.498 seconds
[2024-05-28T16:05:16.921+0000] {processor.py:161} INFO - Started process (PID=363) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:05:16.923+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:05:16.927+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:05:16.927+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:05:16.962+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:05:16.970+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:05:16.977+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:05:16.983+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:05:16.989+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:05:16.993+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:05:16.997+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:05:17.000+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:05:17.020+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:05:17.078+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:05:17.077+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:05:17.107+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:05:17.107+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:05:17.155+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.243 seconds
[2024-05-28T16:05:47.588+0000] {processor.py:161} INFO - Started process (PID=373) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:05:47.597+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:05:47.613+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:05:47.612+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:05:48.026+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:05:48.206+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:05:48.235+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:05:48.248+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:05:48.259+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:05:48.268+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:05:48.283+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:05:48.290+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:05:48.345+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:05:48.541+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:05:48.540+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:05:48.592+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:05:48.591+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:05:48.799+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.246 seconds
[2024-05-28T16:06:19.629+0000] {processor.py:161} INFO - Started process (PID=383) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:06:19.633+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:06:19.646+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:06:19.645+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:06:19.824+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:06:19.842+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:06:19.861+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:06:19.871+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:06:19.881+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:06:19.888+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:06:19.896+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:06:19.905+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:06:19.989+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:06:20.147+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:06:20.146+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:06:20.210+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:06:20.210+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:06:20.287+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.687 seconds
[2024-05-28T16:06:50.471+0000] {processor.py:161} INFO - Started process (PID=393) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:06:50.473+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:06:50.478+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:06:50.478+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:06:50.546+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:06:50.554+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:06:50.561+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:06:50.568+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:06:50.574+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:06:50.579+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:06:50.588+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:06:50.598+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:06:50.654+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:06:50.924+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:06:50.923+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:06:50.995+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:06:50.995+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:06:51.071+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.616 seconds
[2024-05-28T16:07:21.362+0000] {processor.py:161} INFO - Started process (PID=403) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:07:21.364+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:07:21.371+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:07:21.370+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:07:21.417+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:07:21.428+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:07:21.435+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:07:21.441+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:07:21.448+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:07:21.453+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:07:21.459+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:07:21.465+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:07:21.490+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:07:21.568+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:07:21.568+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:07:21.598+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:07:21.597+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:07:21.648+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.299 seconds
[2024-05-28T16:07:52.665+0000] {processor.py:161} INFO - Started process (PID=419) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:07:52.679+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:07:52.696+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:07:52.695+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:07:52.782+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:07:52.791+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:07:52.798+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:07:52.806+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:07:52.812+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:07:52.820+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:07:52.826+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:07:52.832+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:07:52.880+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:07:53.005+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:07:53.004+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:07:53.066+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:07:53.066+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:07:53.159+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.525 seconds
[2024-05-28T16:08:24.046+0000] {processor.py:161} INFO - Started process (PID=429) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:08:24.054+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:08:24.102+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:08:24.072+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:08:24.502+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:08:24.520+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:08:24.547+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:08:24.567+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:08:24.609+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:08:24.626+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:08:24.674+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:08:24.705+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:08:25.012+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:08:25.295+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:08:25.294+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:08:25.402+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:08:25.402+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:08:25.529+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.507 seconds
[2024-05-28T16:08:57.156+0000] {processor.py:161} INFO - Started process (PID=439) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:08:57.334+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:08:57.534+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:08:57.515+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:08:58.067+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:08:58.076+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:08:58.084+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:08:58.092+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:08:58.099+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:08:58.108+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:08:58.117+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:08:58.127+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:08:58.273+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:08:58.504+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:08:58.503+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:08:58.631+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:08:58.631+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:08:58.764+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.914 seconds
[2024-05-28T16:09:29.835+0000] {processor.py:161} INFO - Started process (PID=448) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:09:29.842+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:09:29.851+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:09:29.846+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:09:30.144+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:09:30.306+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:09:30.406+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:09:30.444+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:09:30.484+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:09:30.512+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:09:30.532+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:09:30.549+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:09:30.737+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:09:32.481+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:09:32.480+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:09:32.772+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:09:32.771+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:09:33.078+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 3.357 seconds
[2024-05-28T16:10:03.209+0000] {processor.py:161} INFO - Started process (PID=458) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:10:03.212+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:10:03.217+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:10:03.216+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:10:03.271+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:10:03.280+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:10:03.288+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:10:03.297+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:10:03.303+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:10:03.310+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:10:03.317+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:10:03.324+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:10:03.365+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:10:05.135+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:10:05.135+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:10:05.163+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:10:05.163+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:10:05.241+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 2.046 seconds
[2024-05-28T16:10:36.135+0000] {processor.py:161} INFO - Started process (PID=468) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:10:36.137+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:10:36.142+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:10:36.141+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:10:36.191+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:10:36.199+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:10:36.207+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:10:36.214+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:10:36.219+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:10:36.225+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:10:36.231+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:10:36.239+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:10:36.275+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:10:36.360+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:10:36.360+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:10:36.395+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:10:36.394+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:10:36.455+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.333 seconds
[2024-05-28T16:11:06.591+0000] {processor.py:161} INFO - Started process (PID=478) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:11:06.593+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:11:06.596+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:11:06.595+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:11:06.640+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:11:06.647+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:11:06.652+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:11:06.658+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:11:06.663+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:11:06.675+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:11:06.681+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:11:06.687+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:11:06.707+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:11:06.782+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:11:06.781+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:11:06.812+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:11:06.812+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:11:06.867+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.287 seconds
[2024-05-28T16:11:37.569+0000] {processor.py:161} INFO - Started process (PID=489) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:11:37.572+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:11:37.576+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:11:37.575+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:11:37.614+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:11:37.620+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:11:37.627+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:11:37.631+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:11:37.637+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:11:37.642+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:11:37.649+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:11:37.653+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:11:37.679+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:11:37.739+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:11:37.738+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:11:37.762+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:11:37.762+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:11:37.801+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.245 seconds
[2024-05-28T16:12:08.313+0000] {processor.py:161} INFO - Started process (PID=499) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:12:08.315+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:12:08.320+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:12:08.319+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:12:08.374+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:12:08.381+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:12:08.390+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:12:08.399+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:12:08.405+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:12:08.414+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:12:08.421+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:12:08.428+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:12:08.454+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:12:08.525+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:12:08.524+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:12:08.553+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:12:08.552+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:12:08.607+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.308 seconds
[2024-05-28T16:12:38.999+0000] {processor.py:161} INFO - Started process (PID=509) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:12:39.013+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:12:39.037+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:12:39.036+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:12:39.160+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:12:39.179+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:12:39.185+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:12:39.193+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:12:39.200+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:12:39.209+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:12:39.217+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:12:39.224+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:12:39.268+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:12:39.352+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:12:39.351+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:12:39.432+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:12:39.431+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:12:39.549+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.594 seconds
[2024-05-28T16:13:10.376+0000] {processor.py:161} INFO - Started process (PID=519) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:13:10.379+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:13:10.382+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:13:10.381+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:13:10.448+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:13:10.453+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:13:10.482+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:13:10.507+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:13:10.513+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:13:10.520+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:13:10.526+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:13:10.533+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:13:10.572+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:13:10.710+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:13:10.709+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:13:10.758+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:13:10.757+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:13:10.819+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.463 seconds
[2024-05-28T16:13:41.782+0000] {processor.py:161} INFO - Started process (PID=529) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:13:41.784+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:13:41.787+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:13:41.786+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:13:41.836+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:13:41.842+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:13:41.848+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:13:41.854+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:13:41.860+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:13:41.866+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:13:41.872+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:13:41.877+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:13:41.895+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:13:41.966+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:13:41.966+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:13:41.993+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:13:41.992+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:13:42.035+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.264 seconds
[2024-05-28T16:14:12.592+0000] {processor.py:161} INFO - Started process (PID=539) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:14:12.604+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:14:12.622+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:14:12.619+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:14:12.738+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:14:12.752+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:14:12.766+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:14:12.779+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:14:12.788+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:14:12.801+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:14:12.809+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:14:12.818+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:14:12.862+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:14:12.966+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:14:12.965+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:14:13.039+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:14:13.039+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:14:13.136+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.571 seconds
[2024-05-28T16:14:43.956+0000] {processor.py:161} INFO - Started process (PID=550) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:14:43.966+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:14:43.978+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:14:43.976+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:14:44.191+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:14:44.211+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:14:44.224+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:14:44.235+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:14:44.250+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:14:44.259+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:14:44.298+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:14:44.314+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:14:44.412+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:14:45.657+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:14:45.657+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:14:45.689+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:14:45.689+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:14:45.757+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.871 seconds
[2024-05-28T16:15:16.002+0000] {processor.py:161} INFO - Started process (PID=560) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:15:16.008+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:15:16.013+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:15:16.013+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:15:16.058+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:15:16.063+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:15:16.068+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:15:16.076+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:15:16.082+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:15:16.088+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:15:16.094+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:15:16.102+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:15:16.128+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:15:16.218+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:15:16.218+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:15:16.258+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:15:16.258+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:15:16.306+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.318 seconds
[2024-05-28T16:15:46.845+0000] {processor.py:161} INFO - Started process (PID=570) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:15:46.848+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:15:46.859+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:15:46.857+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:15:46.947+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:15:46.960+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:15:46.972+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:15:46.982+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:15:46.992+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:15:47.000+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:15:47.008+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:15:47.016+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:15:47.091+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:15:47.285+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:15:47.284+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:15:47.354+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:15:47.354+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:15:47.475+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.665 seconds
[2024-05-28T16:16:18.242+0000] {processor.py:161} INFO - Started process (PID=581) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:16:18.269+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:16:18.286+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:16:18.282+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:16:18.459+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:16:18.496+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:16:18.522+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:16:18.536+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:16:18.563+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:16:18.578+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:16:18.598+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:16:18.632+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:16:18.723+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:16:18.921+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:16:18.920+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:16:18.997+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:16:18.997+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:16:19.136+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.947 seconds
[2024-05-28T16:16:50.925+0000] {processor.py:161} INFO - Started process (PID=591) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:16:50.934+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:16:50.978+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:16:50.976+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:16:51.638+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:16:51.879+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:16:51.944+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:16:52.015+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:16:52.109+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:16:52.131+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:16:52.177+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:16:52.349+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:16:52.548+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:16:52.843+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:16:52.843+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:16:53.120+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:16:53.120+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:16:53.435+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 2.560 seconds
[2024-05-28T16:17:24.085+0000] {processor.py:161} INFO - Started process (PID=602) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:17:24.097+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:17:24.155+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:17:24.152+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:17:24.388+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:17:24.418+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:17:24.474+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:17:24.490+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:17:24.527+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:17:24.553+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:17:24.582+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:17:24.620+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:17:24.708+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:17:24.955+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:17:24.954+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:17:25.089+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:17:25.088+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:17:25.199+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.226 seconds
[2024-05-28T16:17:55.832+0000] {processor.py:161} INFO - Started process (PID=612) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:17:55.839+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:17:55.846+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:17:55.845+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:17:55.985+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:17:56.002+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:17:56.015+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:17:56.028+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:17:56.042+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:17:56.059+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:17:56.076+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:17:56.099+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:17:56.164+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:17:56.375+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:17:56.367+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:17:56.485+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:17:56.484+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:17:56.592+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.789 seconds
[2024-05-28T16:18:34.934+0000] {processor.py:161} INFO - Started process (PID=628) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:18:34.984+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:18:35.029+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:18:35.027+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:18:35.902+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:18:35.921+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:18:36.033+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:18:36.119+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:18:36.334+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:18:36.444+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:18:36.470+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:18:36.479+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:18:37.715+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:18:38.233+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:18:38.232+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:18:38.722+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:18:38.721+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:18:39.187+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 4.289 seconds
[2024-05-28T16:19:09.884+0000] {processor.py:161} INFO - Started process (PID=638) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:19:09.886+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:19:09.892+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:19:09.891+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:19:09.946+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:19:09.958+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:19:09.965+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:19:09.975+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:19:09.981+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:19:09.987+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:19:09.993+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:19:10.000+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:19:10.037+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:19:10.106+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:19:10.105+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:19:10.134+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:19:10.133+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:19:10.182+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.315 seconds
[2024-05-28T16:19:41.940+0000] {processor.py:161} INFO - Started process (PID=650) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:19:41.948+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:19:41.972+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:19:41.968+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:19:42.299+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:19:42.390+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:19:42.425+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:19:42.474+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:19:42.514+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:19:42.534+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:19:42.545+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:19:42.555+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:19:42.625+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:19:42.761+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:19:42.760+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:19:42.849+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:19:42.848+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:19:42.956+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.052 seconds
[2024-05-28T16:23:55.255+0000] {processor.py:161} INFO - Started process (PID=40) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:23:55.259+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:23:55.266+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:23:55.266+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:23:55.452+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:23:55.466+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:23:55.473+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:23:55.479+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:23:55.486+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:23:55.494+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:23:55.502+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:23:55.510+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:23:55.559+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:23:56.088+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:23:56.088+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:23:56.551+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:23:56.551+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:23:56.632+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 1.393 seconds
[2024-05-28T16:24:27.502+0000] {processor.py:161} INFO - Started process (PID=51) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:24:27.503+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:24:27.506+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:24:27.505+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:24:27.540+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:24:27.547+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:24:27.552+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:24:27.558+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:24:27.563+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:24:27.567+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:24:27.572+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:24:27.577+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:24:27.595+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:24:27.637+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:24:27.637+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:24:27.654+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:24:27.654+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:24:27.680+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.187 seconds
[2024-05-28T16:24:57.992+0000] {processor.py:161} INFO - Started process (PID=61) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:24:57.996+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:24:58.011+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:24:58.008+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:24:58.089+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:24:58.097+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:24:58.102+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:24:58.107+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:24:58.115+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:24:58.121+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:24:58.131+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:24:58.137+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:24:58.159+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:24:58.220+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:24:58.219+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:24:58.247+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:24:58.246+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:24:58.280+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.302 seconds
[2024-05-28T16:25:28.966+0000] {processor.py:161} INFO - Started process (PID=72) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:25:28.993+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:25:29.030+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:25:29.026+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:25:29.164+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:25:29.178+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:25:29.185+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:25:29.191+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:25:29.204+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:25:29.213+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:25:29.219+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:25:29.227+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:25:29.254+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:25:29.368+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:25:29.367+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:25:29.410+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:25:29.409+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:25:29.474+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.563 seconds
[2024-05-28T16:26:00.298+0000] {processor.py:161} INFO - Started process (PID=82) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:26:00.300+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:26:00.304+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:26:00.304+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:26:00.356+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:26:00.366+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:26:00.373+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:26:00.380+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:26:00.390+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:26:00.399+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:26:00.406+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:26:00.414+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:26:00.437+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:26:00.493+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:26:00.492+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:26:00.520+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:26:00.519+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:26:00.559+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.278 seconds
[2024-05-28T16:26:30.845+0000] {processor.py:161} INFO - Started process (PID=92) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:26:30.848+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:26:30.854+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:26:30.853+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:26:30.910+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:26:30.921+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:26:30.928+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:26:30.936+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:26:30.949+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:26:30.957+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:26:30.967+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:26:30.974+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:26:31.001+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:26:31.058+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:26:31.058+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:26:31.083+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:26:31.082+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:26:31.124+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.292 seconds
[2024-05-28T16:27:01.886+0000] {processor.py:161} INFO - Started process (PID=102) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:27:01.888+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:27:01.892+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:27:01.891+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:27:01.953+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:27:01.959+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:27:01.966+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:27:01.971+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:27:01.983+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:27:01.990+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:27:01.996+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:27:02.002+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:27:02.026+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:27:02.098+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:27:02.098+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:27:02.128+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:27:02.127+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:27:02.168+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.297 seconds
[2024-05-28T16:27:32.744+0000] {processor.py:161} INFO - Started process (PID=112) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:27:32.752+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:27:32.758+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:27:32.756+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:27:32.809+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:27:32.817+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:27:32.825+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:27:32.833+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:27:32.839+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:27:32.844+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:27:32.851+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:27:32.856+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:27:32.890+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:27:33.029+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:27:33.029+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:27:33.101+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:27:33.100+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:27:33.175+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.454 seconds
[2024-05-28T16:28:03.906+0000] {processor.py:161} INFO - Started process (PID=122) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:28:03.931+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:28:03.942+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:28:03.940+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:28:04.288+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:28:04.325+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:28:04.419+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:28:04.490+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:28:04.530+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:28:04.548+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:28:04.567+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:28:04.618+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:28:04.706+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:28:04.843+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:28:04.842+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:28:12.493+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:28:12.493+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:28:12.620+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 8.750 seconds
[2024-05-28T16:28:42.848+0000] {processor.py:161} INFO - Started process (PID=136) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:28:42.850+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:28:42.851+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:28:42.851+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:28:42.883+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:28:42.888+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:28:42.893+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:28:42.897+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:28:42.902+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:28:42.906+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:28:42.912+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:28:42.916+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:28:42.929+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:28:42.970+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:28:42.970+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:28:42.985+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:28:42.985+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:28:43.011+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.170 seconds
[2024-05-28T16:29:13.555+0000] {processor.py:161} INFO - Started process (PID=143) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:29:13.557+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:29:13.558+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:29:13.558+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:29:13.601+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:29:13.606+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:29:13.611+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:29:13.616+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:29:13.621+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:29:13.626+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:29:13.632+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:29:13.637+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:29:13.651+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:29:13.689+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:29:13.689+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:29:13.706+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:29:13.706+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:29:13.731+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.185 seconds
[2024-05-28T16:29:32.791+0000] {processor.py:161} INFO - Started process (PID=144) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:29:32.793+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:29:32.794+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:29:32.793+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:29:32.835+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:29:32.838+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:29:32.841+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:29:32.845+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:29:32.849+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:29:32.852+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:29:32.856+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:29:32.859+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:29:32.871+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:29:33.324+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:29:33.324+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:29:33.335+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:29:33.334+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:29:33.372+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.587 seconds
[2024-05-28T16:30:03.631+0000] {processor.py:161} INFO - Started process (PID=151) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:03.632+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:30:03.634+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:03.633+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:03.663+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:30:03.666+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:30:03.669+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:30:03.671+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:30:03.675+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:30:03.677+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:30:03.680+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:30:03.683+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:30:03.696+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:03.758+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:03.758+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:30:03.772+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:03.772+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:30:03.796+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.171 seconds
[2024-05-28T16:30:30.028+0000] {processor.py:161} INFO - Started process (PID=159) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:30.030+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:30:30.031+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:30.031+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:30.076+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:30:30.080+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:30:30.084+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:30:30.088+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:30:30.092+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:30:30.095+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:30:30.098+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:30:30.101+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:30:30.113+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:30.149+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:30.149+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:30:30.163+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:30.163+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:30:30.190+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.168 seconds
[2024-05-28T16:30:49.398+0000] {processor.py:161} INFO - Started process (PID=166) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:49.399+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:30:49.401+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:49.400+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:49.444+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:30:49.448+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:30:49.452+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:30:49.456+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:30:49.463+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:30:49.466+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:30:49.470+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:30:49.475+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:30:49.489+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:30:49.522+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:49.522+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:30:49.536+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:30:49.536+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:30:49.567+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.177 seconds
[2024-05-28T16:31:19.859+0000] {processor.py:161} INFO - Started process (PID=173) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:19.861+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:31:19.863+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:19.862+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:19.891+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:31:19.895+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:31:19.899+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:31:19.903+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:31:19.907+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:31:19.911+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:31:19.915+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:31:19.919+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:31:19.934+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:19.969+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:19.969+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:31:19.983+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:19.983+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:31:20.010+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.158 seconds
[2024-05-28T16:31:50.077+0000] {processor.py:161} INFO - Started process (PID=180) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:50.079+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:31:50.080+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:50.080+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:50.110+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:31:50.115+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:31:50.119+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:31:50.122+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:31:50.125+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:31:50.128+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:31:50.131+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:31:50.134+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:31:50.147+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:50.183+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:50.182+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:31:50.196+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:50.195+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:31:50.220+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.149 seconds
[2024-05-28T16:31:58.214+0000] {processor.py:161} INFO - Started process (PID=181) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:58.216+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:31:58.218+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:58.218+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:58.277+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:31:58.282+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:31:58.287+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:31:58.292+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:31:58.297+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:31:58.302+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:31:58.310+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:31:58.315+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:31:58.331+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:31:58.368+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:58.368+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:31:58.382+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:31:58.382+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:31:58.640+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.436 seconds
[2024-05-28T16:32:14.482+0000] {processor.py:161} INFO - Started process (PID=189) to work on /opt/airflow/dags/fullcode.py
[2024-05-28T16:32:14.483+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/fullcode.py for tasks to queue
[2024-05-28T16:32:14.485+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:32:14.484+0000] {dagbag.py:545} INFO - Filling up the DagBag from /opt/airflow/dags/fullcode.py
[2024-05-28T16:32:14.530+0000] {logging_mixin.py:188} INFO - CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.Dim_date` AS
SELECT
  SAFE_CAST(order_date AS DATE) AS order_date,
  EXTRACT(MONTH FROM SAFE_CAST(order_date AS DATE)) AS month,
  EXTRACT(QUARTER FROM SAFE_CAST(order_date AS DATE)) AS quarter,
  EXTRACT(YEAR FROM SAFE_CAST(order_date AS DATE)) AS year,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(order_date AS DATE)) IN (1, 7) THEN TRUE
    ELSE FALSE
  END AS weekend_flag
FROM
  `datawarehouse-423912.warehouse.orders`
WHERE
  SAFE_CAST(order_date AS DATE) IS NOT NULL;
[2024-05-28T16:32:14.533+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Order_details` as
select 
*
from
`datawarehouse-423912.warehouse.orderdetails`
[2024-05-28T16:32:14.536+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_customer` as
select 
customerID,
contactName,
address,
city,
phone,
country
from
`datawarehouse-423912.warehouse.customers`
[2024-05-28T16:32:14.540+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Dim_Products` as
select 
products.productID,
products.productname,
products.unitPrice,
categories.categoryID,
categories.categoryName,
from
`datawarehouse-423912.warehouse.products` as products
inner join`datawarehouse-423912.warehouse.categories` as categories
on categories.categoryID = products.categoryID
[2024-05-28T16:32:14.543+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

create or replace table `datawarehouse-423912.OLAP_dataset.Fact_table_temp`
as 
select
orders.order_id,
orders.customer_id,
orders.order_date
from
`datawarehouse-423912.warehouse.orders` as orders
join
`datawarehouse-423912.OLAP_dataset.Dim_Order_details` as order_details
on
orders. order_id = order_details.orderID
[2024-05-28T16:32:14.546+0000] {logging_mixin.py:188} INFO - DECLARE today_date DATE DEFAULT DATE '1998-05-06';

-- Tạo bảng RFM_table
CREATE OR REPLACE TABLE `datawarehouse-423912.OLAP_dataset.RFM_table` AS
WITH RFM_table AS (
  SELECT
    orders.customer_id,
    MAX(CAST(orders.order_date AS DATE)) AS LastPurchaseDate,
    COUNT(DISTINCT orders.order_id) AS TotalTransaction,
    SUM(order_details.quantity * order_details.unitPrice * (1 - order_details.discount)) AS Monetary
  FROM
    `datawarehouse-423912.warehouse.orders` AS orders
  JOIN
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details` AS order_details
  ON
    orders.order_id = order_details.orderID
  GROUP BY
    orders.customer_id
)

-- Thêm các cột điểm vào bảng mới
SELECT
  customer_id,
  DATE_DIFF(today_date, LastPurchaseDate, DAY) AS Recency,
  TotalTransaction AS Frequency,
  Monetary,
  NULL AS recency_score, -- Khởi tạo cột recency_score với giá trị NULL
  NULL AS frequency_score, -- Khởi tạo cột frequency_score với giá trị NULL
  NULL AS monetary_score -- Khởi tạo cột monetary_score với giá trị NULL
FROM
  RFM_table
WHERE
  Monetary > 0;

select * from `datawarehouse-423912.OLAP_dataset.RFM_table`
where customer_id = 'ANTON'
[2024-05-28T16:32:14.549+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Sale_table` AS
SELECT 
    orderID,
    SUM(quantity * unitprice * (1 - discount)) AS total_revenue
FROM 
    `datawarehouse-423912.OLAP_dataset.Dim_Order_details`
GROUP BY 
    orderID;
[2024-05-28T16:32:14.551+0000] {logging_mixin.py:188} INFO - create or replace table `datawarehouse-423912.OLAP_dataset.Order_fact_table` as
with RFM_table as (
  select
  fact.customer_id,
  fact.order_id,
  fact.order_date,
  rfm.Recency,
  rfm.Frequency,
  rfm.Monetary,
  sale.total_revenue
  from
  `datawarehouse-423912.OLAP_dataset.Fact_table` as fact
  join
  `datawarehouse-423912.OLAP_dataset.RFM_table` as rfm
  on 
 fact.customer_id = rfm.customer_id
  JOIN
  `datawarehouse-423912.OLAP_dataset.Sale_table` as sale
  ON
  fact.order_id = sale.orderID
)

select * from RFM_table;
[2024-05-28T16:32:14.563+0000] {processor.py:840} INFO - DAG(s) 'ETL_pipeline' retrieved from /opt/airflow/dags/fullcode.py
[2024-05-28T16:32:14.603+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:32:14.602+0000] {dag.py:3096} INFO - Sync 1 DAGs
[2024-05-28T16:32:14.618+0000] {logging_mixin.py:188} INFO - [2024-05-28T16:32:14.618+0000] {dag.py:3954} INFO - Setting next_dagrun for ETL_pipeline to None, run_after=None
[2024-05-28T16:32:14.654+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/fullcode.py took 0.178 seconds
